{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPDXeJ6vA2I4KpXZQkahl2m"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["# Import our dependencies\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.preprocessing import LabelEncoder\n","from keras.utils import to_categorical\n","import pandas as pd\n","import tensorflow as tf"],"metadata":{"id":"DxDD_UzelhCq","executionInfo":{"status":"ok","timestamp":1712060153160,"user_tz":-60,"elapsed":10000,"user":{"displayName":"mo na","userId":"16790052438334414608"}}},"execution_count":1,"outputs":[]},{"cell_type":"code","source":["# Mount the Google Drive to gain access to functions file\n","from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"id":"RLkG_vkulsuN","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1712060173949,"user_tz":-60,"elapsed":20402,"user":{"displayName":"mo na","userId":"16790052438334414608"}},"outputId":"85069d1a-c9ad-4f8a-d0a2-d92897a0a6e4"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["# Access the notebook with my functions\n","%run '/content/drive/My Drive/Colab Notebooks/Project_4/NN_functions.ipynb'"],"metadata":{"id":"NLWPHJlEl38y","executionInfo":{"status":"ok","timestamp":1712060178000,"user_tz":-60,"elapsed":1272,"user":{"displayName":"mo na","userId":"16790052438334414608"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["#  Import and read the csv file.\n","df=pd.read_csv(\"https://media.githubusercontent.com/media/DanielHughes1580/Project_4_Group_5/main/Data_Cleaned/dummied_data_add_clean.csv\",index_col=0)\n","#df.head()"],"metadata":{"id":"znVZ9KGLl7Bn","executionInfo":{"status":"ok","timestamp":1712060190228,"user_tz":-60,"elapsed":9825,"user":{"displayName":"mo na","userId":"16790052438334414608"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["# Call my function to encode, split and scale the data\n","X_train_scaled, X_test_scaled, y_train, y_test = encode_split_and_scale_data(df)"],"metadata":{"id":"tJkd10fymATp","executionInfo":{"status":"ok","timestamp":1712060194465,"user_tz":-60,"elapsed":3118,"user":{"displayName":"mo na","userId":"16790052438334414608"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["# Try the tanh activation function instead of relu\n","\n","# Call the model to define, fit and evaluate the neural network model.\n","# This model will have 2 hidden layers with 50 neurons in each using the \"tanh\" activation function and will train for 10 epochs\n","nn = define_and_fit_nn_model(X_train_scaled, X_test_scaled, y_train, y_test, 2, 50, \"tanh\",10)\n","# Look at the prediction for 5 rows\n","nn_predict(nn,y_test,X_test_scaled)\n","# Save the model in the native Keras format\n","nn.save(\"/content/drive/My Drive/Colab Notebooks/Project_4/NN_opt_actfunc_2_layers_50_neurons.keras\")"],"metadata":{"id":"8dIy6OTvmDpE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1712060577558,"user_tz":-60,"elapsed":379625,"user":{"displayName":"mo na","userId":"16790052438334414608"}},"outputId":"42c8a39c-401c-460d-8717-78117884eeee"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Input features: 48\n","Adding layer\n","Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," dense (Dense)               (None, 50)                2450      \n","                                                                 \n"," dense_1 (Dense)             (None, 50)                2550      \n","                                                                 \n"," dense_2 (Dense)             (None, 3)                 153       \n","                                                                 \n","=================================================================\n","Total params: 5153 (20.13 KB)\n","Trainable params: 5153 (20.13 KB)\n","Non-trainable params: 0 (0.00 Byte)\n","_________________________________________________________________\n","Epoch 1/10\n","18146/18146 [==============================] - 41s 2ms/step - loss: 1.0016 - accuracy: 0.4948\n","Epoch 2/10\n","18146/18146 [==============================] - 36s 2ms/step - loss: 0.9565 - accuracy: 0.5294\n","Epoch 3/10\n","18146/18146 [==============================] - 37s 2ms/step - loss: 0.9317 - accuracy: 0.5472\n","Epoch 4/10\n","18146/18146 [==============================] - 35s 2ms/step - loss: 0.9156 - accuracy: 0.5590\n","Epoch 5/10\n","18146/18146 [==============================] - 37s 2ms/step - loss: 0.9040 - accuracy: 0.5671\n","Epoch 6/10\n","18146/18146 [==============================] - 38s 2ms/step - loss: 0.8960 - accuracy: 0.5721\n","Epoch 7/10\n","18146/18146 [==============================] - 36s 2ms/step - loss: 0.8899 - accuracy: 0.5760\n","Epoch 8/10\n","18146/18146 [==============================] - 37s 2ms/step - loss: 0.8854 - accuracy: 0.5781\n","Epoch 9/10\n","18146/18146 [==============================] - 36s 2ms/step - loss: 0.8812 - accuracy: 0.5819\n","Epoch 10/10\n","18146/18146 [==============================] - 37s 2ms/step - loss: 0.8778 - accuracy: 0.5841\n","6049/6049 - 7s - loss: 0.8849 - accuracy: 0.5800 - 7s/epoch - 1ms/step\n","\n"," Test Data Loss: 0.8848611116409302, Test Data Accuracy: 0.5800336599349976\n","\n"," test input:  \n","[[0. 1. 0.]\n"," [1. 0. 0.]\n"," [0. 0. 1.]\n"," [0. 1. 0.]\n"," [1. 0. 0.]]\n","1/1 [==============================] - 0s 91ms/step\n","\n"," test output: \n","[[0.6346656  0.11758867 0.24774578]\n"," [0.3312472  0.17342912 0.49532357]\n"," [0.3642054  0.10665301 0.5291416 ]\n"," [0.4457264  0.15513943 0.39913416]\n"," [0.46091986 0.13765727 0.40142283]]\n"]}]}]}